/control/verbose  1
/run/verbose 1
/event/verbose    0
/tracking/verbose 0
/run/initialize
#/detector/reflection none

/run/beamOn 17
#
/control/verbose 1
/run/verbose 2
#
# Use this open statement to create an OpenGL view:
/vis/open OGLIQt 1200x600-0+0
#/vis/open OIX 600x600-0+0
#/vis/open TSGQt 600x600-0+0


# For qt
#/vis/open OGL      #(Generic way. For Stored mode if you have define your G4VIS_USE_QT variable)
#/vis/open OGLI     #(for Immediate mode)
#/vis/open OGLS     #(for Stored mode)
#/vis/open OGLIQt   #(for Immediate mode)
#/vis/open OGLSQt   #(for Stored mode)
#   OpenGLImmediateQt (OGLIQt, OGLI)
#   OpenGLStoredQt (OGLSQt, OGL, OGLS)
#   OpenGLImmediateX (OGLIX, OGLIQt_FALLBACK)
#   OpenGLStoredX (OGLSX, OGLSQt_FALLBACK)

#You have successfully registered the following graphics systems.
#Registered graphics systems are:
#  ASCIITree (ATree)
#  DAWNFILE (DAWNFILE)
#  G4HepRepFile (HepRepFile)
#  RayTracer (RayTracer)
#  VRML2FILE (VRML2FILE)
#  gMocrenFile (gMocrenFile)
#  TOOLSSG_OFFSCREEN (TSG_OFFSCREEN)
#  TOOLSSG_OFFSCREEN (TSG_OFFSCREEN, TSG_FILE)
#  OpenGLImmediateQt (OGLIQt, OGLI)
#  OpenGLStoredQt (OGLSQt, OGL, OGLS)
#  OpenGLImmediateXm (OGLIXm, OGLIQt_FALLBACK)
#  OpenGLStoredXm (OGLSXm, OGLSQt_FALLBACK)
#  OpenGLImmediateX (OGLIX, OGLIQt_FALLBACK, OGLIXm_FALLBACK)
#  OpenGLStoredX (OGLSX, OGLSQt_FALLBACK, OGLSXm_FALLBACK)
#  OpenInventorXt (OIX, OI)
#  OpenInventorXtExtended (OIXE)
#  TOOLSSG_X11_GLES (TSG_X11_GLES, TSGX11, TSG_XT_GLES_FALLBACK)
#  TOOLSSG_XT_GLES (TSG_XT_GLES, TSGXt, TSG_QT_GLES_FALLBACK)
#  TOOLSSG_QT_GLES (TSG_QT_GLES, TSGQt, TSG)

#
# Use this open statement to create a .prim file suitable for
# viewing in DAWN:
#/vis/open DAWNFILE
#
# Use this open statement to create a .heprep file suitable for
# viewing in HepRApp:
#/vis/open HepRepFile
#
# Use this open statement to create a .wrl file suitable for
# viewing in a VRML viewer:
#/vis/open VRML2FILE
#
# Set some default verbose
/control/verbose 2
/control/saveHistory
/run/verbose 2
#
# Change the default number of threads (in multi-threaded mode)
#/run/numberOfThreads 4
#
# Initialize kernel
#/run/initialize
#
# Disable auto refresh and quieten vis messages whilst scene and
# trajectories are established:
/vis/viewer/set/autoRefresh false
/vis/verbose errors
#
# Draw geometry:
/vis/drawVolume EsbSuperFGD_1
#
# Specify view angle:
/vis/viewer/set/viewpointThetaPhi 90. 0.
#
# Specify zoom value:
#/vis/viewer/zoom 2.
#
# Specify style (surface or wireframe):
/vis/viewer/set/style wireframe
#
# Draw coordinate axes:
/vis/scene/add/axes 0 0 0 1 m
#
# Draw smooth trajectories at end of event, showing trajectory points
# as markers 2 pixels wide:
/vis/scene/add/trajectories smooth
/vis/modeling/trajectories/create/drawByCharge
#/vis/modeling/trajectories/drawByCharge-0/default/setDrawStepPts true
#/vis/modeling/trajectories/drawByCharge-0/default/setStepPtsSize 2
# (if too many tracks cause core dump => /tracking/storeTrajectory 0)
#
# Draw hits at end of event:
/vis/scene/add/hits
#
# To draw only gammas:
#/vis/filtering/trajectories/create/particleFilter
#/vis/filtering/trajectories/particleFilter-0/add gamma
#
# To invert the above, drawing all particles except gammas,
# keep the above two lines but also add:
#/vis/filtering/trajectories/particleFilter-0/invert true
#
# Many other options are available with /vis/modeling and /vis/filtering.
# For example, to select colour by particle ID:
/vis/modeling/trajectories/create/drawByParticleID
#/vis/modeling/trajectories/drawByParticleID-0/set e- blue
#
# To superimpose all of the events from a given run:
/vis/scene/endOfEventAction accumulate
#
# Re-establish auto refreshing and verbosity:
/vis/viewer/set/autoRefresh true
/vis/verbose warnings
#
# For file-based drivers, use this to create an empty detector view:
/vis/viewer/flush
#
