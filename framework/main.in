/*
    This is a simulation file using opengl Qt visualization.
    Since the visualizer cannot open if runned as a root script,
    the simulation is created as a standalone app.
*/

#include <string> 

#include "core/simulation/EsbSimManager.hpp"
#include "core/detector/IDetector.hpp"
#include "core/generator/IGenerator.hpp"
//
#include "geometry/SuperFGD/FgdDetector.h"
#include "geometry/SuperFGD/Cave.h"

#include "generators/SuperFGD/GenieGenerator.h"
#include "generators/SuperFGD/FgdGenieGenerator.h"


using namespace esbroot;

int main(int argc, char** argv)
{
    // Configuration
    // For the moment the paths are hardcoded untill utils is created to pass config parse file
    int nEvents = 17;
    std::string fw_dir = "@fw_path@";
    std::string visMacroPath =      fw_dir + "/core/vis";
    std::string workspace_dir =     fw_dir + "/workspace";
    std::string outputFile =        fw_dir + "/workspace/simulation/sim_output.root";
    std::string fgdconfig =         fw_dir + "/geometry/SuperFGD/EsbSuperFGD/EsbConfig/fgdconfig";
    std::string neutrinoFluxPath =  fw_dir + "/neutrino_flux/essnusb_v1/nuFlux/nuFlux100km_250kAm.txt";
    std::string eventsDataPath =    fw_dir + "/workspace/simulation/eventsData.dat";
    std::string genieXCrossPath =   fw_dir + "/workspace/genie/download/genie_xsec/v3_04_00/NULL/G1802a00000-k250-e1000/data/gxspl-FNALsmall.xml";
    //======================================================

    core::simulation::EsbSimManager* esbSim = new core::simulation::EsbSimManager();

    esbSim->setLoggerSeverity(core::simulation::Severity::debug2);
    esbSim->setNumberOfEvents(nEvents);
    esbSim->setWorkingDir(workspace_dir);
    
    esbSim->useVisualization(core::simulation::G4_vis::qt);
//    esbSim->useVisMacro(visMacroPath , "OpenVis.mac");
    esbSim->useVisMacro(visMacroPath , "vis.mac");
    esbSim->setOutputFile(outputFile);

    esbroot::geometry::Cave* cave = new esbroot::geometry::Cave();
    esbSim->setTopVolume(cave->getVolume());

    TVector3 fgdPosition(0,0,-550);
//    TVector3 fgdPosition(0,0,0);
//    TVector3 fgdPosition(100,100,-400); 
    
    core::detector::IDetector* fgdDetector = new geometry::FgdDetector(fgdconfig.c_str()
                                                                                        ,fgdPosition.X()
                                                                                        ,fgdPosition.Y()
                                                                                        ,fgdPosition.Z());

    esbSim->AddDetector(fgdDetector);
 
    unsigned int seed = 42;
    generators::superfgd::GenieGenerator::GlobalState.fGenieTune = "G18_02a_00_000";
    //File with cross-section splines (see: http://scisoft.fnal.gov/scisoft/packages/genie_xsec/)
    generators::superfgd::GenieGenerator::GlobalState.fXsecSplineFileName = genieXCrossPath;     
    generators::superfgd::GenieGenerator::GlobalState.fOutputFileName = eventsDataPath;

    generators::superfgd::FgdGenieGenerator* partGen = new generators::superfgd::FgdGenieGenerator(
		    fgdconfig.c_str()  //File with detector configuration
		    , neutrinoFluxPath.c_str()  // File with neutrino flux to use if the external flux driver is not passed
	        , seed // uniform random number generator seed
            , fgdPosition
            , nEvents
            , nullptr // external_fluxDriver
            , false // set to use uniformalize the flux (it loops around the neutrino records in the flux txt file regard)
            , nullptr // TGeoManager
            , false // fkeepThrowingFluxNu -> flag to GMCJDriver indicating to continue throwing a neutrino until it interacts or to stop if no interaction has occured 
      );

    
    partGen->UseFixVertex(false);

    TVector3 verPosition(fgdPosition.X() ,fgdPosition.Y(), fgdPosition.Z());
    partGen->SetVertexPos(verPosition);

    //Add to list of generators
    esbSim->setGenerator(static_cast<core::generator::IGenerator*>(partGen));

    esbSim->run();
    return 0;
}
